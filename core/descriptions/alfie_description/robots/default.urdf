<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from robots/default.xacro           | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="alfie">
  <!-- Some pretty colors -->
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.5 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="black">
    <color rgba="0.05 0.05 0.05 1.0"/>
  </material>
  <!-- ROTOR DYNAMICS MACROS -->
  <!-- First order dynamics -->
  <!--
    MACROS FOR CONVERSION FUNCTIONS BETWEEN ROTOR'S ANG. VELOCITY AND
    THRUSTER FORCE
  -->
  <!-- THRUSTER MODULE MACROS  -->
  <!--
    Thruster model with first order dynamic model for the rotor dynamics
    and a proportional non-linear steady-state conversion from the rotor's
    angular velocity to output thrust force
  -->
  <!--                                                                      -->
  <!-- MACRO FOR THRUSTER UNITS  -->
  <!--                                                                      -->
  <!-- Provide the propeller mesh in a separate file with the rotation axis
  over propeller's frame X-axis in DAE (Collada) or STL format.
  -->
  <!-- <xacro:property name="prop_mesh_file" value="file://$(find core)/descriptions/alfie_description/meshes/propeller.dae"/> -->
  <!--                                                                      -->
  <!-- MACRO FOR FIN/RUDDER UNITS  -->
  <!--                                                                      -->
  <!--
    This macro can be used to add fins to the body of the vehicle, the fins
    should be initialized in the actuators.xacro file. If you vehicle has no
    fins, you can erase the macro below.
  -->
  <!-- A separate mesh for the fin should be stored in the meshes folder -->
  <!-- <xacro:property name="fin_mesh_file" value="file://$(find core)/descriptions/alfie_description/meshes/fin.dae"/>
-->
  <!-- Fin joint limits
  <xacro:property name="fin_min_joint_limit" value="${0.0 * d2r}"/>
  <xacro:property name="fin_max_joint_limit" value="${0.0 * d2r}"/>

  <xacro:macro name="fin_macro" params="namespace fin_id *origin">
      <joint name="${namespace}/fin${fin_id}_joint" type="revolute">
          <limit effort="0" lower="${fin_min_joint_limit}" upper="${fin_max_joint_limit}" velocity="0"/>
          <xacro:insert_block name="origin"/>
          <axis xyz="0 0 1"/>
          <parent link="${namespace}/base_link" />
          <child link="${namespace}/fin${fin_id}" />
      </joint>

      <link name="${namespace}/fin${fin_id}">
        <inertial>
          <mass value="0.001" />
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <inertia ixx="0.000000017" ixy="0.0" ixz="0.0"
                 iyy="0.000000017" iyz="0.0"
                 izz="0.000000017" />
        </inertial>
        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="${fin_mesh_file}" scale="1 1 1"/>
          </geometry>
        </visual>
      </link>

      <gazebo>
        <plugin name="${namespace}_fin${fin_id}_model" filename="libuuv_fin_ros_plugin.so">


            First order dynamics model for the fin joint dynamics,
            replace an appropriate time constant

          <dynamics>
            <type>FirstOrder</type>
            <timeConstant>0.0</timeConstant>
          </dynamics>


            Definition of the lift and drag model, choose ONE of the models
            below according to the model you want to use.



            2) Reference for the quadratic lift and drag model:
              [1] Engelhardtsen, Oystein. 3D AUV Collision Avoidance.
                  MS thesis. Institutt for teknisk kybernetikk, 2007.
                  https://brage.bibsys.no/xmlui/handle/11250/259834
          <liftdrag>
            <type>Quadratic</type>
            <lift_constant>0.0</lift_constant>
            <drag_constant>0.0</drag_constant>
          </liftdrag>

            Further parameters necessary for the lift and drag plugin

          <current_velocity_topic>/hydrodynamics/current_velocity</current_velocity_topic>

          <link_name>${namespace}/fin${fin_id}</link_name>
          <joint_name>${namespace}/fin${fin_id}_joint</joint_name>

          <output_topic>${namespace}/fins/${fin_id}/output</output_topic>
          <input_topic>${namespace}/fins/${fin_id}/input</input_topic>
          <wrench_topic>${namespace}/fins/${fin_id}/wrench_topic</wrench_topic>
        </plugin>
      </gazebo>
  </xacro:macro> -->
  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->
  <!-- Rigid body description of the base link -->
  <link name="alfie/base_link">
    <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
    <inertial>
      <mass value="20"/>
      <origin rpy="3.141592653589793 0 0" xyz="0 0 0"/>
      <inertia ixx="10" ixy="0" ixz="0" iyy="10" iyz="0" izz="10"/>
    </inertial>
    <visual>
      <origin rpy="3.141592653589793 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="file:///home/sethgi/catkin_ws/src/MuddSub/core/descriptions/alfie_description/meshes/Visual.STL" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="file:///home/sethgi/catkin_ws/src/MuddSub/core/descriptions/alfie_description/meshes/SimCollision.STL" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="alfie/base_link">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!-- Set up hydrodynamic plugin given as input parameter -->
  <gazebo>
    <plugin filename="libuuv_underwater_object_ros_plugin.so" name="uuv_plugin">
      <fluid_density>1028.0</fluid_density>
      <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
      <debug>0</debug>
      <!-- List of hydrodynamic models this robot's links -->
      <link name="alfie/base_link">
        <!-- This flag will make the link neutrally buoyant -->
        <neutrally_buoyant>0</neutrally_buoyant>
        <!-- Link's volume -->
        <volume>0.021</volume>
        <!-- Link's bounding box, it is used to recalculate the immersed
        volume when close to the surface.
        This is a workaround the invalid bounding box given by Gazebo-->
        <box>
          <width>0.25</width>
          <length>0.25</length>
          <height>0.25</height>
        </box>
        <!-- Center of buoyancy -->
        <center_of_buoyancy>0 0 -0.1</center_of_buoyancy>
        <!--
        Choose one of the hydrodynamic models below, all are based on
        Fossen's equation of motion for underwater vehicles

        Reference:
        [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion
            control. John Wiley & Sons, 2011.
        -->
        <!-- 1) Fossen's equation of motion -->
        <hydrodynamic_model>
          <type>fossen</type>
          <added_mass>
            0 0 0 0 0 0
            0 0 0 0 0 0
            0 0 0 0 0 0
            0 0 0 0 0 0
            0 0 0 0 0 0
            0 0 0 0 0 0
          </added_mass>
          <!--
            The linear damping coefficients can be provided as a diagonal (6 elements)
            or a full matrix (36 coefficients), like the added-mass coefficients above
          -->
          <linear_damping>
            -10 -10 -10 -10 -10 -10
          </linear_damping>
          <!--
            The linear damping coefficients proportional to the forward speed
            can be provided as a diagonal (6 elements) or a full matrix (36 coefficients),
            like the added-mass coefficients above.
            This matrix is mostly useful for slender bodies (e.g. AUVs with torpedo shape)
          -->
          <linear_damping_forward_speed>
            0 0 0 0 0 0
          </linear_damping_forward_speed>
          <!--
            The quadratic damping coefficients can be provided as a diagonal (6 elements)
            or a full matrix (36 coefficients), like the added-mass coefficients above
          -->
          <quadratic_damping>
            0 0 0 0 0 0
          </quadratic_damping>
          <!--
            In case you want to model a simple surface vessel, you can use the
            implementation of linear (small angle) theory for boxed shaped vessels
            by providing the following parameters. If you omit the area of the
            water level plane area, it will be calculated from the bounding box
            parameters. Uncomment the lines below in case you are simulating a
            surface vessel.
            For more details on these parameters and the computation of buoyancy
            for vessels using this theory, check:
              [1] Lecture Notes  TTK 4190 Guidance and Control of Vehicles (T. I. Fossen)
                  http://www.fossen.biz/wiley/Ch4.pdf
              [2] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion
                  control. John Wiley & Sons, 2011.
          -->
          <!--
          <metacentric_width>0.0</metacentric_width>
          <metacentric_length>0.0</metacentric_length>
          <submerged_height>0.0</submerged_height>
          -->
        </hydrodynamic_model>
        <!-- 2) This computes the added-mass and damping parameters for a sphere
        in the fluid with the given radius -->
        <!-- <hydrodynamic_model>
          <type>sphere</type>
          <radius>.5</radius>
        </hydrodynamic_model> -->
      </link>
      <!--
          In case other modules are added to the vehicle (such as a manipulator)
          that also have link running with the underwater object plugin, they
          should also be added in this block. For this, this new module should
          have a file similar to gazebo.xacro above with the description of the
          parameter necessary for the underwater object plugin to be initialized.
        -->
    </plugin>
  </gazebo>
  <!-- Adding the thruster units with the macro created in snippets.xacro -->
  <!--
    Important:
        - The thruster IDs must be given as integers and must be unique to each thruster unit
        - The thruster pose in the <origin> block is relative to the body's center of mass. Be
          aware that Gazebo does not use the SNAME convention per default.
    -->
  <!-- <xacro:thruster_macro robot_namespace="${namespace}" thruster_id="0">
        <origin xyz="0 0 0" rpy="0 0 ${pi}" />
    </xacro:thruster_macro>

    <xacro:thruster_macro robot_namespace="${namespace}" thruster_id="1">
        <origin xyz="0 0 0" rpy="0 0 ${pi}" />
    </xacro:thruster_macro>

    <xacro:thruster_macro robot_namespace="${namespace}" thruster_id="2">
    <origin xyz="0 0 0" rpy="0 -${0.5*pi} 0" />
    </xacro:thruster_macro> -->
  <!--
    Some examples of sensors that can be added to the vehicle frame.
    Set the origin of the sensor frames correctly for your application
    Look into the sensor macros in the package uuv_sensor_ros_plugins/urdf for
    more examples or add you own custom sensor units.
  -->
  <link name="alfie/dvl_link">
    <visual>
      <geometry>
        <mesh filename="file:///home/sethgi/catkin_ws/src/MuddSub/sim/plugins/meshes/DVL_A50.STL" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="alfie/dvl_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="alfie/base_link"/>
    <child link="alfie/dvl_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="alfie/dvl_sonar0_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="alfie/dvl_sonar0_joint" type="revolute">
    <origin rpy="0 -0.52 0.0" xyz="0 0 0"/>
    <parent link="alfie/dvl_link"/>
    <child link="alfie/dvl_sonar0_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="alfie/dvl_sonar0_link">
    <sensor name="dvl_sonar0" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar0">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar0</topicName>
        <frameName>alfie/dvl_sonar0_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="alfie/dvl_sonar1_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="alfie/dvl_sonar1_joint" type="revolute">
    <origin rpy="0 0 0.52" xyz="0 0 0"/>
    <parent link="alfie/dvl_link"/>
    <child link="alfie/dvl_sonar1_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="alfie/dvl_sonar1_link">
    <sensor name="dvl_sonar1" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar1">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar1</topicName>
        <frameName>alfie/dvl_sonar1_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="alfie/dvl_sonar2_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="alfie/dvl_sonar2_joint" type="revolute">
    <origin rpy="0 0.52 0.0" xyz="0 0 0"/>
    <parent link="alfie/dvl_link"/>
    <child link="alfie/dvl_sonar2_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="alfie/dvl_sonar2_link">
    <sensor name="dvl_sonar2" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar2">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar2</topicName>
        <frameName>alfie/dvl_sonar2_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="alfie/dvl_sonar3_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="alfie/dvl_sonar3_joint" type="revolute">
    <origin rpy="0 0.0 -0.52" xyz="0 0 0"/>
    <parent link="alfie/dvl_link"/>
    <child link="alfie/dvl_sonar3_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="alfie/dvl_sonar3_link">
    <sensor name="dvl_sonar3" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar3">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar3</topicName>
        <frameName>alfie/dvl_sonar3_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_dvl_plugin.so" name="libuuv_gazebo_dvl_plugin">
      <robot_namespace>alfie</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>alfie/dvl_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>dvl</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names -->
      <update_rate>7</update_rate>
      <!-- Update period [s] -->
      <noise_sigma>0</noise_sigma>
      <!-- std dev of position estimates in x, y, z [m/s] -->
      <noise_amplitude>0</noise_amplitude>
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <enable_local_ned_frame>false</enable_local_ned_frame>
      <static_reference_frame>world_ned</static_reference_frame>
      <!-- Declaring the beams -->
      <beam_link_name_0>alfie/dvl_sonar0_link</beam_link_name_0>
      <beam_link_name_1>alfie/dvl_sonar1_link</beam_link_name_1>
      <beam_link_name_2>alfie/dvl_sonar2_link</beam_link_name_2>
      <beam_link_name_3>alfie/dvl_sonar3_link</beam_link_name_3>
      <!-- Declaring the beam output topics -->
      <beam_topic_0>dvl_sonar0</beam_topic_0>
      <beam_topic_1>dvl_sonar1</beam_topic_1>
      <beam_topic_2>dvl_sonar2</beam_topic_2>
      <beam_topic_3>dvl_sonar3</beam_topic_3>
    </plugin>
  </gazebo>
  <!-- Mount a camera  -->
  <!-- <xacro:default_camera namespace="${namespace}" parent_link="${namespace}/base_link" suffix="">
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:default_camera> -->
  <gazebo>
    <plugin filename="libuuv_joint_state_publisher.so" name="uuv_joint_state_publisher">
      <robotNamespace>alfie</robotNamespace>
      <updateRate>10</updateRate>
    </plugin>
  </gazebo>
</robot>
